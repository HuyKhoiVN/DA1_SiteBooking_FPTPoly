@using BaseSolution.BlazorServer.Data.DataTransferObjects.Customer
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Customer.Request
@using BaseSolution.BlazorServer.Respository.Interfaces
@page "/customer/PersonalInformation"
@inject IdCustomer idCustomer

<CustomListDisplayP2 Label="@("Hồ sơ")" IsLoading="_isLoadingAll" HideSearch="true">
    <BodyContent>
        <MudPaper Elevation="0" Class="custom-list-display-border">
            @if (_isLoadingList)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true"></MudProgressLinear>
            }
            else
            {
                <MudGrid>

                    <MudItem xs="12" md="6" Class="d-flex justify-center align-center">
                        <MudPaper Style="font-size:40px" Elevation="0">
                            <div class="mud-theme-primary pa-16  flex; align-items: center; justify-content: center "> @(_customerInfo?.Name?.Length > 0 ? _customerInfo.Name.Substring(0, 1) : string.Empty)</div>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudPaper Class="pa-4 mt-6 mt-lg-16" >
                            <MudCard Class="p-3" Elevation="0">
                                <MudCardContent>
                                    <MudForm Model="customerUpdateRequest" @ref="@_form" @bind-IsValid="@_formIsValid">
                                        <MudPaper Width="100%" Elevation="0">

                                            <MudTextField @bind-Value="customerUpdateRequest.Name" For="@(() => customerUpdateRequest.Name)" Style="font-size: 24px; label-lg;" Label="Tên"></MudTextField>

                                            <MudTextField @bind-Value="customerUpdateRequest.IdentificationNumber" For="@(() => customerUpdateRequest.IdentificationNumber)" Style="font-size: 24px; label-lg;" Label="Mã định danh"></MudTextField>

                                            <MudTextField @bind-Value="customerUpdateRequest.PhoneNumber" For="@(() => customerUpdateRequest.PhoneNumber)" Style="font-size: 24px; label-lg;" Label="Số điện thoại"></MudTextField>

                                            <MudTextField @bind-Value="customerUpdateRequest.Email" For="@(() => customerUpdateRequest.Email)" Style="font-size: 24px; label-lg;" Label="Email"></MudTextField>

                                        </MudPaper>
                                    </MudForm>
                                </MudCardContent>
                                <MudCardActions Class="d-flex justify-center align-right pl-16">
                                    @if (_customerInfo == null)
                                    {
                                        <MudButton OnClick="OnClickCancel">Hủy</MudButton>
                                    }
                                    else
                                    {
                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async() => await Update())">Lưu</MudButton>
                                    }
                                </MudCardActions>
                                    @* <MudDivider /> *@
                                </MudCard>
                            </MudPaper>
                        </MudItem>
                    
                    </MudGrid>

            }
        </MudPaper>
    </BodyContent>
</CustomListDisplayP2>
@code {
    [Parameter]
    public Guid customerId { get; set; }
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [Inject]
    public ICustomerRepo customerRepo { get; set; }
    [Inject]
    public IDialogService _dialogService { get; set; }
    [Inject]
    public ISnackbar _snackbar { get; set; }
    private CustomerDTO customerVM;
    private CustomerDTO _customerInfo;
    private bool _isLoadingAll = true;
    private bool _isLoadingList = true;
    private bool _isDisableControls = false;
    private bool closeDetail = true;
    private bool _formIsValid;
    MudForm _form;
    private ViewCustomerWithPaginationRequest customerRequest = new();
    private CustomerDetailUpdateRequest customerUpdateRequest = new();

    protected override async Task OnInitializedAsync()
    {
        customerId = IdCustomer.Instance.Id;
        await LoadData();
    }
    private async Task LoadData()
    {
        try
        {
            _customerInfo = await customerRepo.GetCustomerById(customerId);
            customerUpdateRequest.Id = _customerInfo.Id;
            customerUpdateRequest.Name = _customerInfo.Name;
            customerUpdateRequest.IdentificationNumber = _customerInfo.IdentificationNumber;
            customerUpdateRequest.PhoneNumber = _customerInfo.PhoneNumber;
            customerUpdateRequest.Email = _customerInfo.Email;
            _isLoadingList = false;
            _isLoadingAll = false;
        }
        catch (Exception ex)
        {
            _snackbar.Add("Không có thông tin cá nhân", Severity.Error);
        }
    }
    private bool CheckChangeData()
    {
        return _customerInfo!.Name != customerUpdateRequest.Name
        || _customerInfo.IdentificationNumber != customerUpdateRequest.IdentificationNumber
        || _customerInfo.PhoneNumber != customerUpdateRequest.PhoneNumber
        || _customerInfo.Email != customerUpdateRequest.Email;
    }
    private async Task Update()
    {
        await _form.Validate();
        if (!_form.IsValid) return;
        var confirm = await _dialogService.ShowMessageBox
        (
            "Thông báo",
            "Xác nhận sửa thông tin cá nhân",
            "Xác nhận",
            cancelText: "Hủy"
        );
        if (confirm == true)
        {
            var result = await customerRepo.UpdateDetailCustomer(customerUpdateRequest);
            if (result)
            {
                if (CheckChangeData())
                {

                    _snackbar.Add("Sửa thành công", Severity.Success);
                }
                else
                {
                    OnClickCancel();
                    _snackbar.Add("Không có thay đổi dữ liệu để cập nhật", Severity.Warning);
                }
            }
            else
            {
                _snackbar.Add("Sửa thất bại", Severity.Error);
            }
            await Reset();
        }
    }
    private void OnClickCancel()
    {
        MudDialog.Cancel();
    }
    private async Task Reset()
    {
        await LoadData();
    }
}
