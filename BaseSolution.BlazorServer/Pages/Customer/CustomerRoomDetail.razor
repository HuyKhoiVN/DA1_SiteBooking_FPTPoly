@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomDetail
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomDetail.Request
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomType
@using BaseSolution.BlazorServer.Respository.Interfaces
<MudDialog>
    <DialogContent>
        @if (_lstRoomDetail == null)
        {
            <MudText>Không có phòng nào</MudText>
        }
        else
        {
            @*  <MudGrid>
        <MudItem xs="12" md="3" lg="2">
        <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Checkin" DateFormat="dd/MM/yyyy" Date="@(new System.DateTime(2023,12,11))" />
        </MudItem>
        <MudItem xs="12" md="3" lg="2">
        <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Checkout" DateFormat="dd/MM/yyyy" Date="@(new System.DateTime(2023,12,15))" />
        </MudItem>

        <MudItem xs="12" md="3" lg="2">
        <MudSelect Label="Số người tối đa" @bind-Value="_idRoomDetail">
        @foreach (var item in _lstRoomDetail)
        {
        <MudSelectItem Value="@item.Id.ToString()">@item.MaxPeopleStay</MudSelectItem>
        }
        </MudSelect>
        </MudItem>
        <MudItem xs="12" md="3" lg="2">
        <MudSelect Label="Giá" @bind-Value="_idRoomDetail">
        @foreach (var item in _lstRoomDetail)
        {
        <MudSelectItem Value="@item.Id.ToString()">@item.Price</MudSelectItem>
        }
        </MudSelect>
        <MudSelect Label="Diện tích phòng" @bind-Value="_idRoomDetail">
        @foreach (var item in _lstRoomDetail)
        {
        <MudSelectItem Value="@item.Id.ToString()">@item.RoomSize</MudSelectItem>
        }
        </MudSelect>
        </MudItem>

        </MudGrid> *@
            <MudTable Items="_lstRoomDetail">
                <HeaderContent>
                    <MudTh>STT</MudTh>
                    <MudTh>Tên phòng</MudTh>
                    <MudTh>Giá</MudTh>
                    <MudTh>Số người tối đa</MudTh>
                    <MudTh>Diện tích phòng</MudTh>
                    <MudTh>Hành động</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@(_lstRoomDetail.IndexOf(context) + 1)</MudTd>
                    <MudTd>@context.Name</MudTd>
                        <MudTd>@context.Price</MudTd>
                        <MudTd>@context.MaxPeopleStay</MudTd>
                        <MudTh>@context.RoomSize</MudTh>
                        <MudTh>
                            <MudChip Icon="@Icons.Material.Filled.MenuOpen" Color="Color.Primary" OnClick="@( async() => await OpenDetail(context.Id))" Disabled="@_isDisableControls">Xem phòng</MudChip>
                            <MudChip Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@( async() => await OpenAdd(context.Id))" Disabled="@_isDisableControls">Đặt phòng</MudChip>
                        </MudTh>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
        }
    </DialogContent>
    <DialogActions>
        @if (roomTypeInfo == null)
        {
            <MudButton OnClick="OnClickCancel">Hủy</MudButton>
        }
        else
        {
            <MudButton OnClick="OnClickCancel">Hủy</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    #region
    [Parameter]
    public Guid idRoomType { get; set; }
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [Inject]
    public IRoomDetailRespo roomDetailRespo { get; set; }
    [Inject]
    public ISnackbar _snackbar { get; set; }
    [Inject]
    public IDialogService _dialogService { get; set; }
    [Inject]
    public IRoomTypeRepo roomTypeRespo { get; set; }
    private RoomTypeDTO? roomTypeInfo;

    private PaginationResponse<RoomDetailDTO> _roomDetailVM = new PaginationResponse<RoomDetailDTO>();
    private List<RoomDetailDTO>? _lstRoomDetail;
    private ViewRoomDetailWithPaginationRequest _roomDetailRequest = new();
    bool _isDisableControls = false;
    #endregion

    protected async override Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        //truyền vào id RoomType lấy ra list RoomDetail
        _roomDetailVM.Data = await roomDetailRespo.GetRoomDetailByIdRoomType(idRoomType);
        _lstRoomDetail = _roomDetailVM.Data!.ToList();
    }
    public async Task OpenAdd(Guid idRoomDetail)
    {
        var getStatus = await roomDetailRespo.GetRoomDetailById(idRoomDetail);
        if (getStatus.Status != RoomStatus.Occupied)
        {
            var parameters = new DialogParameters<RoomBookingCreate>();
            parameters.Add(x => x.idRoomDetail, idRoomDetail);
            var dialog = await _dialogService.ShowAsync<RoomBookingCreate>("Đặt phòng", parameters);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await LoadData();
            }
        }
        else
        {
            _snackbar.Add("Phòng đã được thuê", Severity.Error);
        }


    }
    public async Task OpenDetail(Guid idRoomDetail)
    {
        var parameters = new DialogParameters<RoomDetail>();
        parameters.Add(x => x.idRoomDetail, idRoomDetail);
        var dialog = await _dialogService.ShowAsync<RoomDetail>("Chi tiết phòng", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadData();
        }
    }
    private void OnClickCancel()
    {
        MudDialog.Cancel();
    }
}
