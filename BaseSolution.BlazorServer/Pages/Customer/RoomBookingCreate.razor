@using BaseSolution.BlazorServer.Data.DataTransferObjects.Customer;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Customer.Request;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomBooking.Request;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomBooking;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomBookingDetail
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomBookingDetail.Request
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomDetail;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomDetail.Request;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Service.Request;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.ServiceType;
@using BaseSolution.BlazorServer.Extensions
@using BaseSolution.BlazorServer.Pages.Customer;
@using BaseSolution.BlazorServer.Respository.Interfaces;
<MudDialog>
    <DialogContent>
        @if (_isLoadingList)
        {
            <LoadingIndicator></LoadingIndicator>
        }
        else
        {
            <MudForm Model="@_roomBookingCreateRequest" @ref="_form">
                <MudPaper Elevation="0">
                    <MudSelect T="string" Label="Khách hàng" Class="mb-2"
                               AnchorOrigin="Origin.BottomCenter" @bind-Value="@customerId" For="@(() => customerId)" Required="true">
                        @foreach (var item in lstCustomer)
                        {
                            <MudSelectItem Value="@item.Id.ToString()">@item.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudTextField T="string" Label="Mã định danh" @bind-Value="createRequest.IdentificationNumber" Required="true" />
                    <MudTextField T="string" Label="Nhập code" Required="true" @bind-Value="createRequest.ApprovedCode"></MudTextField>
                    <MudItem>
                        <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Giờ vào" DateFormat="dd/MM/yyyy" @bind-Date="checkIn" Required="true" />
                    </MudItem>
                    <MudItem>
                        <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Giờ ra" DateFormat="dd/MM/yyyy" @bind-Date="checkOut" Required="true" />
                    </MudItem>
                </MudPaper>
            </MudForm>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="OnClickCancel">Hủy</MudButton>
        <MudButton OnClick="Reset">Khôi phục</MudButton>
        <MudButton OnClick="CreateNewRoomBooking">Đặt phòng</MudButton>
    </DialogActions>
</MudDialog>

@code {
    #region Khai báo
    [Parameter]
    public Guid idRoomDetail { get; set; }
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [Inject]
    public IRoomDetailRespo roomDetailRespo { get; set; }
    [Inject]
    public IRoomBookingRespo roomBookingRespo { get; set; }
    [Inject]
    public ICustomerRepo customerRespo { get; set; }
    [Inject]
    public IRoomBookingDetailRepo roomBookingDetailRepo { get; set; }
    [Inject]
    public IDialogService _dialogService { get; set; }
    [Inject]
    public ISnackbar _snackbar { get; set; }

    private ViewRoomDetailWithPaginationRequest _roomDetailPaginationRequest = new();

    private ViewCustomerWithPaginationRequest customer = new();

    private PaginationResponse<RoomDetailDTO> _roomDetailVM;
    private PaginationResponse<CustomerDTO> _customerVM;

    List<RoomDetailDTO> lstRoomDetails = new();
    List<CustomerDTO> lstCustomer = new();
    private RoombookingCreateRequest _roomBookingCreateRequest = new();
    public CustomerCreateRequest createRequest = new();
    private RoomBookingDetailUpdate2Request _roomBookingDetailUpdateRequest = new();
    private RoomDetailUpdateStatusRequest _roomDetailUpdateStatusRequest = new();
    private string customerId;

    private bool _isLoadingList = true;
    MudForm _form;

    DateTime? checkIn;
    DateTime? checkOut;
    #endregion
    #region Code xử lý
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await LoadCombobox();
    }
    private async Task LoadData()
    {
        _customerVM = await customerRespo.GetCustomer(customer);
        lstCustomer = _customerVM.Data!.ToList();

        _isLoadingList = false;
    }
    private void OnClickCancel()
    {
        MudDialog.Cancel();
    }
    private async Task LoadCombobox()
    {
        var roomDetail = new ViewRoomDetailByCheckInCheckOutRequest
            {
                CheckInBooking = (DateTimeOffset)checkIn,
                CheckOutBooking = (DateTimeOffset)checkOut,
            };
        _roomDetailVM = await roomDetailRespo.GetAllRoomDetailsByStatus(roomDetail);
        lstRoomDetails = _roomDetailVM.Data!.ToList();
        
    }

    private void Reset()
    {
        _roomBookingCreateRequest = new();
        createRequest = new();
        idRoomDetail = Guid.Empty;
        customerId = null;
    }
    private async Task CreateNewRoomBooking()
    {
        await _form.Validate();
        if (!_form.IsValid) return;
        var confirm = await _dialogService.ShowMessageBox
        (
            "Thông báo",
            "Xác nhận thêm phòng?",
            "Xác nhận",
            cancelText: "Hủy"
        );
        if (confirm == true)
        {
            var getStatusCustomer = await customerRespo.GetCustomerById(Guid.Parse(customerId));
            var verifyCustomer = await customerRespo.VerifyCustomerBooking(Guid.Parse(customerId), createRequest.IdentificationNumber, createRequest.ApprovedCode);
            if (verifyCustomer == true && getStatusCustomer.Status == EntityStatus.Active)
            {
                var code = UtilityExtentions.GenerateRandomString(6);
                _roomBookingCreateRequest.RoomDetailId = idRoomDetail;
                _roomBookingCreateRequest.CustomerId = Guid.Parse(customerId);
                _roomBookingCreateRequest.BookingType = BookingType.Online;
                _roomBookingCreateRequest.CodeBooking = code;
                var result = await roomBookingRespo.CreateRoomBooking(_roomBookingCreateRequest);

                if (result.ToString() != null)
                {
                    var getPriceRoomDetail = await roomDetailRespo.GetRoomDetailById(idRoomDetail);
                    var getId = await roomBookingDetailRepo.GetRoomBookingDetailByRoomBookingId(result);

                    _roomBookingDetailUpdateRequest.Id = getId.Id;
                    _roomBookingDetailUpdateRequest.RoomBookingId = getId.RoomBookingId;
                    _roomBookingDetailUpdateRequest.Price = getPriceRoomDetail.Price;
                    _roomBookingDetailUpdateRequest.CheckInBooking =(DateTime)checkIn;
                    _roomBookingDetailUpdateRequest.CheckOutBooking = (DateTime)checkOut;
                    _roomBookingDetailUpdateRequest.PrePaid = getPriceRoomDetail.Price * (decimal)0.3;
                    _roomBookingDetailUpdateRequest.RoomDetailId = getId.RoomDetailId;

                    var updateRoomBookingDetail = await roomBookingDetailRepo.UpdateRoomBookingDetail2(_roomBookingDetailUpdateRequest);

                    _roomDetailUpdateStatusRequest.Id = idRoomDetail;
                    _roomDetailUpdateStatusRequest.Status = RoomStatus.Occupied;
                    _roomDetailUpdateStatusRequest.ModifiedBy = Guid.Parse(customerId);
                    var updateRoomDetailStatus = await roomDetailRespo.UpdateRoomDetailStatus(_roomDetailUpdateStatusRequest);
                    MudDialog.Close(DialogResult.Ok(true));
                    _snackbar.Add("Thêm thành công", Severity.Success); 
                   
                }
                else
                {
                    _snackbar.Add
                    (
                        "Thêm thất bại",
                         Severity.Error
                    );
                }
                Reset();
            }
            else
            {
                await  _dialogService.ShowMessageBox("Thông báo", "Xác nhận mã thất bại", "Xác nhận", cancelText: "Hủy");
            }
        }
    }
    #endregion
}
