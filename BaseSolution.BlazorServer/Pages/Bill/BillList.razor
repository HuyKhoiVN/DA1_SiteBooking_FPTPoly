@page "/bill"
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Amenity;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Amenity.Request;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Bill;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Bill.Request;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomBooking;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomBooking.Request;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomDetail;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomDetail.Request;
@using BaseSolution.BlazorServer.Respository.Interfaces;
<PageTitle>Quản lý tiện ích khách sạn</PageTitle>
<CustomListDisplayP2 Label="@("Danh sách các bill đã đặt ")" IsLoading="_isLoadingAll" DisableSearch="_isDisableControls" OnSearch="@OnSearch">
    <HeaderContent>
        <MudChip Icon="@Icons.Material.Filled.Add" @onclick="async() => await OpenAdd()" Color="Color.Primary">Thêm</MudChip>
    </HeaderContent>
    <BodyContent>
        <MudPaper Elevation="0" Class="custom-list-display-border">
            @if (lstBill == null)
            {
                <MudText>Không có data</MudText>
            }
            @if (_isLoadingList)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true"></MudProgressLinear>
            }
            else
            {
                <MudCard Class="p-3" Elevation="2">
                    <MudTable Items="@billVM.Data">
                        <HeaderContent>
                            <MudTh>STT</MudTh>
                            <MudTh>Mã hóa đơn</MudTh>
                            <MudTh>Ngày xuất</MudTh>
                            <MudTh>Loại bill</MudTh>
                            <MudTh>Tổng tiền</MudTh>
                            <MudTh>Trạng thái</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@(lstBill.IndexOf(context) + 1)</MudTd>
                                <MudTd>@context.Id</MudTd>
                                <MudTd>@context.CreatedTime.DateTime</MudTd>
                                <MudTh>@context.BillType</MudTh>
                                <MudTh>@context.TotalAmount</MudTh>
                                <MudTd><BadgeEntityStatus Status="@context.Status"></BadgeEntityStatus></MudTd>

                                <MudTd>
                                    <MudChip Icon="@Icons.Material.Filled.MenuOpen" Color="Color.Primary" OnClick="@(() => OpenDetail(context.Id))" Disabled="@_isDisableControls">Chi tiết</MudChip>
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                        <MudDivider />
                        <CustomPagination Class="my-1" HasNext="@billVM.HasNext" OnPageChange="@(async e=> await  OnPaginationButtonClick(e))" CurrentPageNumber="billVM.PageNumber"></CustomPagination>
                    </MudCard>
            }
        </MudPaper>
    </BodyContent>
</CustomListDisplayP2>
@code {
    #region Khai báo
    [Inject]
    public IBillRespo billRepo { get; set; }
    [Inject]
    public IDialogService _dialogService { get; set; }
    public ISnackbar _snackbar { get; set; }
    private PaginationResponse<BillDTO> billVM;
    private bool _isLoadingAll = true;
    private bool _isLoadingList = true;
    private bool _isDisableControls = false;
    private ViewBillWithPaginationRequest request = new();
    private List<BillDTO> lstBill;
    #endregion
    #region Code xử lý
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        billVM = await billRepo.GetAllBill(request);
        lstBill = billVM.Data!.ToList();
        _isLoadingList = false;
        _isLoadingAll = false;
    }
    private async Task OnPaginationButtonClick(int pageNumber)
    {
        if (_isDisableControls) return;
        _isLoadingList = true;
        request.PageNumber = pageNumber;
        await LoadData();
    }
    private async Task OnSearch(string? searchString)
    {
        _isLoadingList = true;
        request.PageNumber = 1;
        request.Search = searchString;
        await LoadData();

    }
    private async Task OpenDetail(Guid idBill)
    {
        var parameters = new DialogParameters<BillUpdate>();
        parameters.Add(x => x.idBill, idBill);
        var dialog = await _dialogService.ShowAsync<BillUpdate>("Chi tiết bill", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadData();
        }
    }
    #endregion
    #region Code event
    private async Task OpenAdd()
    {
        var dialog = await _dialogService.ShowAsync<BillCreate>("Thêm bill cho khách sạn");
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadData();
            StateHasChanged();
        }
    }
    #endregion
}
