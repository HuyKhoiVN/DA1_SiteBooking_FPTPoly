@using BaseSolution.BlazorServer.Data.DataTransferObjects.ServiceType.Request;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.ServiceType;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.User
@using BaseSolution.BlazorServer.Data.DataTransferObjects.User.Request
@using BaseSolution.BlazorServer.Respository.Interfaces;
<MudDialog>
    <DialogContent>
        @if (user == null)
        {
            <MudText>Không có loại dịch vụ của bạn</MudText>
        }
        else
        {
            <MudForm Model="userUpdateRequest" @ref="_form" @bind-IsValid="_formIsValid">
                <MudPaper Width="100%" Elevation="0">
                    <MudTextField @bind-Value="userUpdateRequest.Name" For="@(() => userUpdateRequest.Name)" Label="Tên nhân viên"></MudTextField>
                    <MudTextField @bind-Value="userUpdateRequest.Email" For="@(() => userUpdateRequest.Email)" Label="Email"></MudTextField>
                    <MudTextField @bind-Value="userUpdateRequest.UserName" For="@(() => userUpdateRequest.UserName)" Label="Tài khoản"></MudTextField>
                    <MudTextField @bind-Value="userUpdateRequest.Password" For="@(() => userUpdateRequest.Password)" Label="Mật khẩu"></MudTextField>
                    <MudTextField @bind-Value="userUpdateRequest.PhoneNumber" For="@(() => userUpdateRequest.PhoneNumber)" Label="Số điện thoại"></MudTextField>
                    <MudSelect T="EntityStatus" AnchorOrigin="Origin.BottomCenter" @bind-Value="userUpdateRequest.Status" For="@(() => userUpdateRequest.Status)">
                        <MudSelectItem Value="EntityStatus.Active">Hoạt động</MudSelectItem>
                        <MudSelectItem Value="EntityStatus.InActive">Không hoạt động</MudSelectItem>
                        <MudSelectItem Value="EntityStatus.Pending">Chờ</MudSelectItem>
                        <MudSelectItem Value="EntityStatus.PendingForActivation">Chờ hoạt động</MudSelectItem>
                        <MudSelectItem Value="EntityStatus.PendingForConfirmation">Chờ kích hoạt</MudSelectItem>
                        <MudSelectItem Value="EntityStatus.PendingForApproval">Chờ chấp thuận</MudSelectItem>
                        <MudSelectItem Value="EntityStatus.Locked">Khóa</MudSelectItem>
                    </MudSelect>
                </MudPaper>
            </MudForm>
        }
    </DialogContent>
    <DialogActions>
        @if (user == null)
        {
            <MudButton @onclick="OnClickCancel">Hủy</MudButton>
        }
        else
        {
            <MudButton OnClick="OnClickCancel">Hủy</MudButton>
            <MudButton OnClick="@(async() => await Reset())">Khôi phục</MudButton>
            <MudButton OnClick="@(async() => await UpdateUser())">Lưu</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    #region Khai báo
    [Parameter]
    public Guid idUser { get; set; }
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [Inject]
    public IUserRepo userRespo { get; set; }
    [Inject]
    public IDialogService dialogService { get; set; }
    [Inject]
    public ISnackbar snackbar { get; set; }
    MudForm _form;
    private bool _formIsValid;
    private UserUpdateRequest userUpdateRequest = new();
    private UserHotelDTO? user;
    #endregion
    #region Code xử lý
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        user = await userRespo.GetUserById(idUser);
        userUpdateRequest.Id = user.Id;
        userUpdateRequest.Name = user.Name;
        userUpdateRequest.Email = user.Email;
        userUpdateRequest.UserName = user.UserName;
        userUpdateRequest.Password = user.Password;
        userUpdateRequest.PhoneNumber = user.PhoneNumber;
        userUpdateRequest.Status = user.Status;
    }
    private void OnClickCancel()
    {
        MudDialog.Cancel();
    }
    private bool CheckChangeData()
    {
        return user!.Name != userUpdateRequest.Name || user.Status != userUpdateRequest.Status || user.UserName != userUpdateRequest.UserName 
        || user.Password != userUpdateRequest.Password || user.PhoneNumber != userUpdateRequest.PhoneNumber || user.Email != userUpdateRequest.Email;
    }
    private async Task UpdateUser()
    {
        await _form.Validate();
        if (!_form.IsValid) return;
        var confirm = await dialogService.ShowMessageBox
        (
            "Thông báo",
            "Xác nhận sửa loại dịch vụ",
            "Xác nhận",
            cancelText: "Hủy"
        );
        if (confirm == true)
        {
            var result = await userRespo.UpdateUserAsync(userUpdateRequest);
            if (result)
            {
                if (CheckChangeData())
                {
                    MudDialog.Close(DialogResult.Ok(true));
                    snackbar.Add("Sửa thành công", Severity.Success);
                }
                else
                {
                    OnClickCancel();
                    snackbar.Add("Không có thay đổi dữ liệu để cập nhật", Severity.Warning);
                }
            }
            else
            {
                snackbar.Add("Sửa thất bại", Severity.Error);
            }
            await Reset();
        }
    }
    private async Task Reset()
    {
        await LoadData();
    }
    #endregion
}
