@page "/roomtype"
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomType
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomType.Request
@using BaseSolution.BlazorServer.Respository.Interfaces
<PageTitle>Quản lý loại phòng khách sạn</PageTitle>
<CustomListDisplayP2 Label="@("Danh sách loại phòng của khách sạn")" IsLoading="lstRoomType == null && _isLoadingAll" DisableSearch="_isDisableControls" OnSearch="@OnSearch">
    <HeaderContent>
        <MudChip Icon="@Icons.Material.Filled.Add" @onclick="async() => await OpenAdd()" Color="Color.Primary">Thêm</MudChip>
    </HeaderContent>
    <BodyContent>
        <MudPaper Elevation="0" Class="custom-list-display-border">
            @if (_isLoadingList)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true"></MudProgressLinear>
            }
            else
            {
                <MudCard Class="p-3" Elevation="0">
                    <MudTable Items="@roomTypeVM.Data" Style="position: relative;" Elevation="0">
                        <HeaderContent>
                            <MudTh>STT</MudTh>
                            <MudTh>Tên loại phòng</MudTh>
                            <MudTh>Số lượng tiện ích</MudTh>
                            <MudTh>Số lượng phòng</MudTh>
                            <MudTh>Khoảng giá</MudTh>
                            <MudTh>Trạng thái</MudTh>
                            <MudTh>Hành động</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@(lstRoomType.IndexOf(context) + 1)</MudTd>
                            <MudTd>@context.Name</MudTd>
                                <MudTd>
                                    @context.NumberOfAmenities
                                    <MudIconButton Icon="@Icons.Material.Filled.Checklist"></MudIconButton>
                                </MudTd>
                                <MudTh>
                                    @context.NumberOfRoomDetails
                                    <MudIconButton Icon="@Icons.Material.Filled.MeetingRoom"></MudIconButton>
                                </MudTh>
                                <MudTh>@context.MinPriceOfRoom - @context.MaxPriceOfRoom</MudTh>
                                <MudTd><BadgeEntityStatus Status="@context.Status"></BadgeEntityStatus></MudTd>
                                <MudTd>
                                    <MudChip Icon="@Icons.Material.Filled.MenuOpen" Color="Color.Primary" OnClick="@(() => OpenDetail(context.Id))" Disabled="@_isDisableControls">Chi tiết</MudChip>
                                    <MudChip Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@( async() => await OnDelete(context.Id))" Disabled="@_isDisableControls">Xóa</MudChip>
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                        <MudDivider />
                        <CustomPagination Class="my-1" HasNext="@roomTypeVM.HasNext" OnPageChange="@(async e=> await  OnPaginationButtonClick(e))" CurrentPageNumber="roomTypeVM.PageNumber"></CustomPagination>
                    </MudCard>
            }
        </MudPaper>
    </BodyContent>
</CustomListDisplayP2>
@code {
    #region Khai báo
    [Inject]
    public IRoomTypeRespo roomTypeRespo { get; set; }
    [Inject]
    public IDialogService _dialogService { get; set; }
    [Inject]
    public ISnackbar _snackbar { get; set; }
    private PaginationResponse<RoomTypeDTO> roomTypeVM;
    private List<RoomTypeDTO> lstRoomType;
    private ViewRoomTypeWithPaginationRequest roomTypeViewRequest = new();
    private RoomTypeDeleteRequest roomTypeDeleteRequest = new();
    private bool _isLoadingAll = true;
    private bool _isLoadingList = true;
    private bool _isDisableControls = false;
    #endregion
    #region Code xử lý
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        roomTypeVM = await roomTypeRespo.GetAllRoomTypes(roomTypeViewRequest);
        lstRoomType = roomTypeVM.Data!.ToList();
        _isLoadingList = false;
        _isLoadingAll = false;
    }
    private async Task OnPaginationButtonClick(int pageNumber)
    {
        if (_isDisableControls) return;
        _isLoadingList = true;
        roomTypeViewRequest.PageNumber = pageNumber;
        await LoadData();
    }
    public async Task OnDelete(Guid deleteId)
    {
        var confirm = await _dialogService.ShowMessageBox
        (
            "Thông báo",
            "Xác nhận xóa loại phòng?",
            "Xác nhận",
            cancelText: "Hủy"
        );
        if (confirm == true)
        {
            roomTypeDeleteRequest.Id = deleteId;
            var removeConfirm = await roomTypeRespo.DeleteRoomType(roomTypeDeleteRequest);
            if (removeConfirm)
            {
                _snackbar.Add("Xóa thành công", Severity.Success);
            }
            else
            {
                _snackbar.Add("Xóa thất bại", Severity.Error);
            }
            await LoadData();
        }
    }
    private async Task OnSearch(string? searchString)
    {
        _isLoadingList = true;
        roomTypeViewRequest.PageNumber = 1;
        roomTypeViewRequest.SearchString = searchString;
        await LoadData();

    }
    private async Task OpenDetail(Guid idRoomType)
    {
        var parameters = new DialogParameters<RoomTypeUpdate>();
        parameters.Add(x => x.id, idRoomType);
        var dialog = await _dialogService.ShowAsync<RoomTypeUpdate>("Chi tiết loại phòng", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadData();
        }
    }
    private async Task OpenAdd()
    {
        var dialog = await _dialogService.ShowAsync<RoomTypeCreate>("Thêm loại phòng cho khách sạn");
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadData();
            StateHasChanged();
        }
    }
    #endregion
}
