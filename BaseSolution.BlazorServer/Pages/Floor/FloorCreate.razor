@using BaseSolution.BlazorServer.Data.DataTransferObjects.Building;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Floor.Request;
@using BaseSolution.BlazorServer.Respository.Interfaces;
<MudPopover Style="background-color: rgba(255, 255, 255, 0.8); width: 100vw; height: 100vh; position: fixed;" Open="true" Elevation="0">
    <MudPaper class="d-flex justify-center align-center " Elevation="0" Width="100%" Height="100%" >
        <MudPaper Class="px-5 pt-5 pb-4 w-50" Elevation="3">
            <MudForm Model="@floorCreateRequest" @ref="_form" >
                <h5>Thêm tầng cho khách sạn</h5>
                <div class="container">
                    <div class="row">
                        <div class="col">
                            <MudTextField @bind-Value="@floorCreateRequest.Name" For="@(() => floorCreateRequest.Name)" Label="Tên tầng"></MudTextField>
                        </div>
                    </div>
                </div>
                <div class="container">
                    <div class="row">
                        <div class="col">
                            <MudTextField @bind-Value="@floorCreateRequest.NumberOfRoom" For="@(() => floorCreateRequest.NumberOfRoom)" Label="Số phòng cho thuê nhiều nhất"></MudTextField>
                        </div>
                    </div>
                </div>
            </MudForm>
        </MudPaper>
    </MudPaper>
</MudPopover>

@code {
    #region Khai báo
    MudForm _form;
    [Parameter]
    public EventCallback onCloseAdd { get; set; }
    [Inject]
    public IBuildingRespo buildingRespo { get; set; }
    [Inject]
    public IFloorRespo floorRespo { get; set; }
    [Inject]
    public IDialogService _dialogService { get; set; }
    [Inject]
    public ISnackbar _snackbar { get; set; }
    private PaginationResponse<BuildingDTO> buildingPage;
    private List<BuildingDTO> lstBuilding;
    private FloorCreateRequest floorCreateRequest = new();

    #endregion
    #region Xử lý code
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        buildingPage = await buildingRespo.GetAllBuilding(new Data.DataTransferObjects.Building.Request.ViewBuildingWithPaginationRequest { PageSize = int.MaxValue - 1 });
        lstBuilding = buildingPage.Data.ToList();
    }
    private async Task OnClickCancel()
    {
        await onCloseAdd.InvokeAsync();
    }
    private async Task CreateNewFloor()
    {
        await _form.Validate();
        if (!_form.IsValid) return;
        var confirm = await _dialogService.ShowMessageBox
        (
            "Thông báo",
            "Xác nhận thêm tầng vào tòa nhà?",
            "Xác nhận",
            cancelText: "Hủy"
        );
        if (confirm == true)
        {
            var result = await floorRespo.CreateNewFloor(floorCreateRequest);
            if (result == true)
            {
                await OnClickCancel();
                _snackbar.Add("Thêm thành công", Severity.Success);
            }
            else
            {
                _snackbar.Add
                (
                    "Thêm thất bại",
                     Severity.Error
                );
            }
            await Reset();
        }
    }
    private async Task Reset()
    {
        floorCreateRequest = new FloorCreateRequest();
    }
    #endregion
}
