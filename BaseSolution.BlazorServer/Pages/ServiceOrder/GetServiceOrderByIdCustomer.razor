@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomDetail
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomDetail.Request
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomType
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Service;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.ServiceOrder;
@using BaseSolution.BlazorServer.Respository.Interfaces
<MudDialog>
    <DialogContent>
        @if (_lstServiceOrder == null)
        {
            <MudText>Không có dịch vụ nào</MudText>
        }
        else
        {
            <MudTable Items="_lstServiceOrder.DistinctBy(x => x.ServiceName).ToList()">
                <RowTemplate>
                    <MudTd>@(_lstServiceOrder.IndexOf(context) + 1)</MudTd>
                        <MudTd>@context.ServiceName</MudTd>
                        <MudTd>@context.Quantity</MudTd>
                        <MudChip Icon="@Icons.Material.Filled.Add" @onclick="async() => await OpenAdd(context.RoomBookingDetailId,context.CustomerId)" Color="Color.Primary">Thêm dịch vụ</MudChip>

                    </RowTemplate>
                </MudTable>

        }
    </DialogContent>
    <DialogActions>
        @if (serviceOderInfo == null)
        {
            <MudButton OnClick="OnClickCancel">Hủy</MudButton>
        }
        else
        {
            <MudButton OnClick="OnClickCancel">Hủy</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    #region
    [Parameter]
    public Guid idroomBooking { get; set; }
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [Inject]
    public IServiceOrderRepo serviceOrderRepo { get; set; }
    [Inject]
    public ISnackbar _snackbar { get; set; }
    [Inject]
    public IDialogService dialogService { get; set; }

    [Inject]
    public IDialogService _dialogService { get; set; }

    private ServiceOrderForRoomBookingDTO? serviceOderInfo;


    private PaginationResponse<ServiceOrderForRoomBookingDTO> _ServiceOrderlVM = new PaginationResponse<ServiceOrderForRoomBookingDTO>();
    private List<ServiceOrderForRoomBookingDTO>? _lstServiceOrder;

    private ViewRoomDetailWithPaginationRequest roomDetailRequest = new();
    bool _isDisableControls = false;
    #endregion

    protected async override Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        _ServiceOrderlVM.Data = await serviceOrderRepo.GetRoomDetailByIdRoomBooking(idroomBooking);
        _lstServiceOrder = _ServiceOrderlVM.Data!.ToList();
    }
    public async Task OpenAdd(Guid idRoomBookingDetail, Guid CustomerId)
    {
        var parameters = new DialogParameters<ServiceOrderCreateForRoomBooking>();
        parameters.Add(x => x.idCustomer, CustomerId);
        parameters.Add(x => x.idroomBookingDetail, idRoomBookingDetail);
        var dialog = await _dialogService.ShowAsync<ServiceOrderCreateForRoomBooking>("Thêm dịch vụ", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadData();
        }
    }
    private void OnClickCancel()
    {
        MudDialog.Cancel();
    }
}
