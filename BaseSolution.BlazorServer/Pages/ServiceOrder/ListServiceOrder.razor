@page "/serviceOrder"
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Amenity;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Amenity.Request;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Bill;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Bill.Request;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomBooking;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomBooking.Request;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomDetail;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.RoomDetail.Request;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Service;
@using BaseSolution.BlazorServer.Data.DataTransferObjects.ServiceOrder.Request;
@using BaseSolution.BlazorServer.Respository.Interfaces;
<PageTitle>Quản lý tiện ích khách sạn</PageTitle>
<CustomListDisplayP2 Label="@("Danh sách các dịch vụ đã đặt ")" IsLoading="_isLoadingAll" DisableSearch="_isDisableControls" OnSearch="@OnSearch">
    <HeaderContent>
        <MudChip Icon="@Icons.Material.Filled.Add" @onclick="async() => await OpenAdd()" Color="Color.Primary">Thêm</MudChip>
    </HeaderContent>
    <BodyContent>
        <MudPaper Elevation="0" Class="custom-list-display-border">
            @if (lstServiceOrder == null)
            {
                <MudText>Không có data</MudText>
            }
            @if (_isLoadingList)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true"></MudProgressLinear>
            }
            else
            {
                <MudCard Class="p-3" Elevation="2">
                    <MudTable Items="@ServiceOrderVM.Data">
                        <HeaderContent>
                            <MudTh>STT</MudTh>
                            <MudTh>Khách hàng</MudTh>
                            <MudTh>Dịch vụ</MudTh>
                            <MudTh>Ngày đặt</MudTh>
                            <MudTh>Số lượng</MudTh>
                            <MudTh>Gía</MudTh>
                            <MudTh>Tổng tiền</MudTh>
                            <MudTh>Trạng thái</MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@(lstServiceOrder.IndexOf(context) + 1)</MudTd>
                                <MudTd>@context.CustomerName</MudTd>
                                <MudTh>@context.Name</MudTh>
                                <MudTh>@context.CreatedTime.DateTime</MudTh>
                                <MudTh>@context.Quantity</MudTh>
                                <MudTh>@context.Price</MudTh>
                                <MudTh>@context.TotalAmount</MudTh>
                                <MudTd><BadgeEntityStatus Status="@context.Status"></BadgeEntityStatus></MudTd>
                                <MudTd>
                                    <MudChip Icon="@Icons.Material.Filled.MenuOpen" Color="Color.Primary" OnClick="@(() => OpenDetail(context.Id))" Disabled="@_isDisableControls">Chi tiết</MudChip>
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                        <MudDivider />
                        <CustomPagination Class="my-1" HasNext="@ServiceOrderVM.HasNext" OnPageChange="@(async e=> await  OnPaginationButtonClick(e))" CurrentPageNumber="ServiceOrderVM.PageNumber"></CustomPagination>
                    </MudCard>
            }
        </MudPaper>
    </BodyContent>
</CustomListDisplayP2>
@code {
    #region Khai báo
    [Inject]
    public IServiceOrderRepo serviceOrderRepo { get; set; }
    [Inject]
    public IDialogService _dialogService { get; set; }
    public ISnackbar _snackbar { get; set; }
    private PaginationResponse<ServiceOrderDTO> ServiceOrderVM;
    private bool _isLoadingAll = true;
    private bool _isLoadingList = true;
    private bool _isDisableControls = false;
    private ViewServiceOrderWithPaginationRequest request = new();
    private List<ServiceOrderDTO> lstServiceOrder;
    #endregion
    #region Code xử lý
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        ServiceOrderVM = await serviceOrderRepo.GetAllServices(request);
        lstServiceOrder = ServiceOrderVM.Data!.ToList();
        _isLoadingList = false;
        _isLoadingAll = false;
    }
    private async Task OnPaginationButtonClick(int pageNumber)
    {
        if (_isDisableControls) return;
        _isLoadingList = true;
        request.PageNumber = pageNumber;
        await LoadData();
    }
    private async Task OnSearch(string? searchString)
    {
        _isLoadingList = true;
        request.PageNumber = 1;
        request.SearchString= searchString;
        await LoadData();

    }
    private async Task OpenDetail(Guid idServiceOrder)
    {
        var parameters = new DialogParameters<ServiceOderUpdate>();
        parameters.Add(x => x.idServiceOrder, idServiceOrder);
        var dialog = await _dialogService.ShowAsync<ServiceOderUpdate>("Chi tiết dịch vụ", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadData();
        }
    }
    #endregion
    #region Code event
    private async Task OpenAdd()
    {
        var dialog = await _dialogService.ShowAsync<ServicerOrderCreate>("Thêm dịch vụ đã đặt");
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadData();
            StateHasChanged();
        }
    }
    #endregion
}
